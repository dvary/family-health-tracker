version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: family-health-db
    environment:
      POSTGRES_DB: family_health_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      TZ: Asia/Kolkata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - family-health-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  db-init:
    image: postgres:15-alpine
    container_name: family-health-db-init
    environment:
      POSTGRES_DB: family_health_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      TZ: Asia/Kolkata
    networks:
      - family-health-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -U postgres; do
          echo 'Waiting for PostgreSQL...' &&
          sleep 2;
        done &&
        echo 'PostgreSQL is ready!' &&
        echo 'Running database initialization...' &&
        PGPASSWORD=\$POSTGRES_PASSWORD psql -h postgres -v ON_ERROR_STOP=1 --username \"\$POSTGRES_USER\" --dbname \"\$POSTGRES_DB\" <<-EOSQL
          -- Enable UUID extension
          CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";

          -- Drop existing tables if they exist (for clean initialization)
          DROP TABLE IF EXISTS documents CASCADE;
          DROP TABLE IF EXISTS medical_reports CASCADE;
          DROP TABLE IF EXISTS health_vitals CASCADE;
          DROP TABLE IF EXISTS family_members CASCADE;
          DROP TABLE IF EXISTS users CASCADE;
          DROP TABLE IF EXISTS families CASCADE;

          -- Create families table
          CREATE TABLE families (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              name VARCHAR(255) NOT NULL,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          -- Create users table
          CREATE TABLE users (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              email VARCHAR(255) UNIQUE NOT NULL,
              password VARCHAR(255) NOT NULL,
              first_name VARCHAR(100) NOT NULL,
              last_name VARCHAR(100) NOT NULL,
              family_id UUID NOT NULL REFERENCES families(id) ON DELETE CASCADE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          -- Create family_members table
          CREATE TABLE family_members (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              family_id UUID NOT NULL REFERENCES families(id) ON DELETE CASCADE,
              user_id UUID REFERENCES users(id) ON DELETE SET NULL,
              name VARCHAR(255) NOT NULL,
              date_of_birth DATE,
              gender VARCHAR(20) CHECK (gender IN ('male', 'female', 'other', 'prefer_not_to_say')),
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          -- Create health_vitals table
          CREATE TABLE health_vitals (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              member_id UUID NOT NULL REFERENCES family_members(id) ON DELETE CASCADE,
              vital_type VARCHAR(50) NOT NULL CHECK (vital_type IN ('height', 'weight', 'cholesterol', 'hemoglobin', 'sgpt', 'sgot', 'vitamin_d', 'thyroid_tsh', 'thyroid_t3', 'thyroid_t4', 'vitamin_b12', 'calcium', 'hba1c', 'urea', 'fasting_blood_glucose', 'creatinine')),
              value DECIMAL(10,2) NOT NULL,
              unit VARCHAR(20) NOT NULL,
              notes TEXT,
              recorded_at TIMESTAMP WITH TIME ZONE NOT NULL,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          -- Create medical_reports table
          CREATE TABLE medical_reports (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              member_id UUID NOT NULL REFERENCES family_members(id) ON DELETE CASCADE,
              report_type VARCHAR(50) NOT NULL CHECK (report_type IN ('lab_report', 'prescription_consultation', 'vaccination', 'hospital_records')),
              report_sub_type VARCHAR(100),
              title VARCHAR(255) NOT NULL,
              description TEXT,
              file_path VARCHAR(500) NOT NULL,
              file_name VARCHAR(255) NOT NULL,
              file_size BIGINT NOT NULL,
              report_date DATE NOT NULL,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          -- Create documents table
          CREATE TABLE documents (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              member_id UUID NOT NULL REFERENCES family_members(id) ON DELETE CASCADE,
              title VARCHAR(255) NOT NULL,
              description TEXT,
              file_path VARCHAR(500) NOT NULL,
              file_name VARCHAR(255) NOT NULL,
              file_size BIGINT NOT NULL,
              upload_date DATE NOT NULL,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          -- Create indexes for better performance
          CREATE INDEX idx_users_email ON users(email);
          CREATE INDEX idx_users_family_id ON users(family_id);
          CREATE INDEX idx_family_members_family_id ON family_members(family_id);
          CREATE INDEX idx_family_members_user_id ON family_members(user_id);
          CREATE INDEX idx_health_vitals_member_id ON health_vitals(member_id);
          CREATE INDEX idx_health_vitals_vital_type ON health_vitals(vital_type);
          CREATE INDEX idx_health_vitals_recorded_at ON health_vitals(recorded_at);
          CREATE INDEX idx_medical_reports_member_id ON medical_reports(member_id);
          CREATE INDEX idx_medical_reports_report_type ON medical_reports(report_type);
          CREATE INDEX idx_medical_reports_report_date ON medical_reports(report_date);
          CREATE INDEX idx_documents_member_id ON documents(member_id);
          CREATE INDEX idx_documents_upload_date ON documents(upload_date);

          -- Optional: Insert a default family for testing
          INSERT INTO families (name) VALUES ('Default Family') ON CONFLICT DO NOTHING;

          RAISE NOTICE 'Database initialization completed successfully!';
        EOSQL &&
        echo 'Database initialization completed!'
      "
    restart: "no"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: family-health-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password123}@postgres:5432/family_health_tracker
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: 7d
      PORT: 5000
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: /app/uploads
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      TZ: Asia/Kolkata
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      db-init:
        condition: service_completed_successfully
    command: >
      sh -c "
        echo 'Database initialization completed, starting backend server...' &&
        npm start
      "
    networks:
      - family-health-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health-check', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: family-health-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
      TZ: Asia/Kolkata
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - family-health-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  family-health-network:
    driver: bridge
