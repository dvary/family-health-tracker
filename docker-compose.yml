version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: family-health-db
    environment:
      POSTGRES_DB: family_health_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - family-health-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d family_health_tracker && psql -U postgres -d family_health_tracker -c 'SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = \\'public\\';' | grep -q '[0-9]'"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: family-health-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password123}@postgres:5432/family_health_tracker
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: 7d
      PORT: 5000
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: /app/uploads
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        while ! pg_isready -h postgres -U postgres -d family_health_tracker; do
          echo 'Database not ready, waiting...' &&
          sleep 5;
        done &&
        echo 'Database is ready!' &&
        echo 'Verifying database tables...' &&
        TABLE_COUNT=\$(psql -h postgres -U postgres -d family_health_tracker -t -c 'SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = \\'public\\';' | tr -d ' ') &&
        echo \"Found \$TABLE_COUNT tables\" &&
        if [ \"\$TABLE_COUNT\" -lt 7 ]; then
          echo 'Database tables not found, reinitializing...' &&
          psql -h postgres -U postgres -d family_health_tracker -f /docker-entrypoint-initdb.d/01-init.sql
        fi &&
        echo 'Starting backend server...' &&
        npm start
      "
    networks:
      - family-health-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health-check', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: family-health-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - family-health-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  family-health-network:
    driver: bridge
